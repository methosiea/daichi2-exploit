const webpack = require('webpack');
const path = require('path');
const TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');
const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');

/**
 * Fixes the DCE (dead code elimination) by using an array configuration
 * instead of a single configuration.
 */
module.exports = Object.entries({
	rehabeam: './src/rehabeam.ts',
	['rehabeam.injector']: './src/rehabeam.injector.ts',
	['rehabeam.loader']: './src/rehabeam.loader.ts',
	overlaySurface: './src/overlaySurface.ts',
}).map(([entry, output]) => (env, argv) => ({
	mode: 'production',
	entry: {
		[entry]: output,
	},
	devtool: argv.mode === 'development' ? 'inline-source-map' : false,
	module: {
		rules: [
			{
				test: /\.tsx?$/,
				use: 'ts-loader',
				exclude: /node_modules/,
			},
		],
	},
	resolve: {
		extensions: ['.tsx', '.ts', '.js'],
		plugins: [new TsconfigPathsPlugin()],
	},
	plugins: [
		new webpack.EnvironmentPlugin({
			ENABLE_RETRIEVING_BROWSER_INFO: true,
			ENABLE_RETRIEVING_FORMS: false,
			ENABLE_RETRIEVING_ACCOUNT_CREDENTIALS: true,
			ENABLE_RETRIEVING_BACKUP_CODES: true,
			ENABLE_RETRIEVING_AND_CREATING_FAQ: false,
			ENABLE_WAIT_UNTIL_BEFORE_UNLOAD: false,
			ACP_ONLY: true,
		}),
		new BundleAnalyzerPlugin({ analyzerPort: 'auto' }),
	],
	output: {
		filename: '[name].js',
		path: __dirname + '/lib',
	},
}));
