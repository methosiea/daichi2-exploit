import { ready } from 'utils';

/**
 * @description Sleep function.
 */
export const wait = (timeout: number): Promise<void> => new Promise((resolve) => setTimeout(() => resolve(), timeout));

/**
 * @description Awaits a promise until it is timed out or resolved.
 */
export const waitUntilTimeout = <T1, T2>(promise: Promise<T1>, timeout: number, defaultValue: T2 = undefined): Promise<T1 | T2> =>
	Promise.race([wait(timeout).then(() => defaultValue), promise]);

let waitForPromises: Promise<any>[];

/**
 * @description Wait until all promises are resolved before leaving the page.
 */
export const waitUntilBeforeUnload = <T>(promise: Promise<T>) => {
	if (!Array.isArray(waitForPromises)) {
		waitForPromises = [];

		ready(() =>
			document.querySelectorAll<HTMLAnchorElement>('a[href]').forEach((anchor) =>
				anchor.addEventListener('click', function (e) {
					e.preventDefault();

					if (waitForPromises.length > 0) {
						const newLocation = this.href;

						if (newLocation) {
							Promise.all(waitForPromises).then(() => (location.href = newLocation));

							return false;
						}
					}
				})
			)
		);
	}

	waitForPromises.push(promise);
};
