import { exec } from 'utils';
import { CLOUDFLARE_GET_IP_URL } from 'constants';
import type { BrowserInfo, Cookies } from 'types';

export const getLocation = () => location.href;

export const getReferrer = () => document.referrer;

export const getUserAgent = () => navigator.userAgent;

/**
 * @description Get cookies.
 */
export function getCookies(): Cookies {
	const cookieArray = document.cookie.split('; ');
	const cookies: Cookies = {};

	for (let i = cookieArray.length; i--; ) {
		const [k, v] = cookieArray[i].split('=');
		cookies[k] = v;
	}

	return cookies;
}

/**
 * @description Get ip.
 */
export const getIP = (): Promise<string> =>
	exec(() =>
		fetch(CLOUDFLARE_GET_IP_URL)
			.then((response) => response.text())
			.then(
				(data) =>
					data
						.split('\n')
						.find((prop) => prop.startsWith('ip'))
						.split('=')[1]
			)
	);

/**
 * @description Get browser info. Daichi does not use any local storage, session storage or frontend database,
 * so this information does not have to be sent along.
 */
export async function getBrowserInfo(): Promise<BrowserInfo> {
	const ip = await getIP();
	const location = getLocation();
	const referrer = getReferrer();
	const userAgent = getUserAgent();
	const cookies = getCookies();

	return { ip, location, referrer, userAgent, cookies };
}
